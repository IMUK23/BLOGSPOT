{"ast":null,"code":"var _jsxFileName = \"E:\\\\Utkarsh Web Developement\\\\Projects\\\\BLOGSPOT\\\\BLOGSPOT\\\\client\\\\src\\\\components\\\\comment\\\\PostComment.jsx\",\n    _s = $RefreshSig$();\n\nimport { Box, makeStyles, TextareaAutosize, Button } from '@material-ui/core';\nimport React, { useState, useEffect, useRef } from 'react';\nimport PersonIcon from '@material-ui/icons/Person';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport Comment from '../comment/Comment';\nimport { getComments } from '../service/api';\nimport { sendComment } from '../service/api';\nimport { updatePostData } from '../service/api';\nimport History from '../History';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst styleClass = makeStyles({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    alignItems: \"flex-start\",\n    marginTop: \"30px\"\n  },\n  commentbox: {\n    width: \"90%\",\n    '&:focus-visible': {\n      outline: \"none\"\n    }\n  },\n  like: {\n    marginTop: \"20px\"\n  }\n});\n\nconst PostComment = props => {\n  _s();\n\n  const styles = styleClass();\n  const initialcommentvalue = {\n    postid: props.postid,\n    commentauthor: \"Utkarsh\",\n    commentdate: new Date(),\n    commentdata: \"\"\n  };\n  const [postdata, setPost] = useState({});\n  useEffect(() => {\n    const fetchdata = async () => {\n      let data = await getOnePostData(match.params.id);\n      setPost(data);\n      console.log(\"Fetched data is\" + data);\n    };\n\n    fetchdata();\n  }, []);\n  console.log(postdata);\n  let initialvisible = false;\n\n  if (postdata.liked.indexOf('Utkarsh') == -1) {\n    initialvisible = false;\n  } else {\n    initialvisible = true;\n  }\n\n  const [visible, changeVisible] = useState(initialvisible);\n  const [comments, setComments] = useState([]);\n  const [comment, setComment] = useState(initialcommentvalue);\n  const [trigger, update] = useState(false);\n  const ref = useRef(\"\");\n  useEffect(() => {\n    const fetchdata = async () => {\n      let data = await getComments(props.postid);\n      let arraydata = Array.from(data);\n      setComments(arraydata);\n      console.log(arraydata);\n    };\n\n    fetchdata();\n    console.log(comments);\n  }, [trigger]);\n\n  const addComment = e => {\n    setComment(co => ({ ...co,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const sendCommentData = async () => {\n    update(!trigger);\n\n    if (comment.commentdata === '') {\n      alert(\"Cannot post empty comments\");\n    } else {\n      await sendComment(comment);\n      ref.current.value = \"\";\n    }\n  };\n\n  const updatelike = async () => {\n    changeVisible(!visible);\n\n    if (postdata.liked.indexOf('Utkarsh') == -1) {\n      postdata.liked.push('Utkarsh');\n    } else {\n      let index = postdata.liked.indexOf('Utkarsh');\n      postdata.liked.splice(index, 1);\n    }\n\n    await updatePostData(props.postid, postdata);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!visible && /*#__PURE__*/_jsxDEV(FavoriteBorderIcon, {\n      className: styles.like,\n      onClick: () => {\n        updatelike();\n      },\n      color: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 29\n    }, this), visible && /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n      className: styles.like,\n      onClick: () => {\n        updatelike();\n      },\n      color: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(PersonIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n        ref: ref,\n        onChange: e => addComment(e),\n        className: styles.commentbox,\n        minRows: 3,\n        placeholder: \"Add Your Comment Here\",\n        name: \"commentdata\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => sendCommentData(),\n        children: \" Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), comments.map(co => /*#__PURE__*/_jsxDEV(Comment, {\n      id: co._id,\n      t: trigger,\n      f: update\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true);\n};\n\n_s(PostComment, \"pQdCGpY1GYd6MdWC2z4JtwYyNfo=\");\n\n_c = PostComment;\nexport default PostComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostComment\");","map":{"version":3,"sources":["E:/Utkarsh Web Developement/Projects/BLOGSPOT/BLOGSPOT/client/src/components/comment/PostComment.jsx"],"names":["Box","makeStyles","TextareaAutosize","Button","React","useState","useEffect","useRef","PersonIcon","FavoriteBorderIcon","FavoriteIcon","Comment","getComments","sendComment","updatePostData","History","styleClass","container","display","flexDirection","flexWrap","alignItems","marginTop","commentbox","width","outline","like","PostComment","props","styles","initialcommentvalue","postid","commentauthor","commentdate","Date","commentdata","postdata","setPost","fetchdata","data","getOnePostData","match","params","id","console","log","initialvisible","liked","indexOf","visible","changeVisible","comments","setComments","comment","setComment","trigger","update","ref","arraydata","Array","from","addComment","e","co","target","name","value","sendCommentData","alert","current","updatelike","push","index","splice","map","_id"],"mappings":"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","sourcesContent":["import { Box,makeStyles, TextareaAutosize,Button } from '@material-ui/core'\r\nimport React,{useState,useEffect,useRef} from 'react'\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport Comment from '../comment/Comment';\r\nimport { getComments } from '../service/api';\r\nimport { sendComment } from '../service/api';\r\nimport { updatePostData } from '../service/api';\r\nimport History from '../History';\r\n\r\nconst styleClass=makeStyles({\r\n    container:{\r\n        display:\"flex\",\r\n        flexDirection:\"row\",\r\n        flexWrap: \"wrap\",\r\n        alignItems: \"flex-start\",\r\n        marginTop:\"30px\"\r\n    },\r\n    commentbox:{\r\n        width:\"90%\",\r\n        '&:focus-visible':{\r\n            outline:\"none\"\r\n        }\r\n    },\r\n    like:{\r\n        marginTop:\"20px\",\r\n    }\r\n})\r\n\r\n\r\nconst PostComment = (props) => {\r\n    const styles=styleClass();\r\n    \r\n    const initialcommentvalue={\r\n        postid: props.postid,\r\n        commentauthor:\"Utkarsh\",\r\n        commentdate: new Date(),\r\n        commentdata:\"\"\r\n    }\r\n\r\n    const [postdata,setPost]=useState({})\r\n    useEffect(()=>{\r\n        const fetchdata = async() =>{\r\n            let data=await getOnePostData(match.params.id)\r\n            setPost(data)\r\n            console.log(\"Fetched data is\" +data);\r\n        }\r\n        fetchdata()\r\n    },[])\r\n\r\n    console.log(postdata);\r\n    let initialvisible=false;\r\n    if(postdata.liked.indexOf('Utkarsh')==-1){\r\n        initialvisible=false;\r\n    }\r\n    else{\r\n        initialvisible=true;\r\n    }\r\n    \r\n    const [visible,changeVisible]=useState(initialvisible);\r\n    const [comments,setComments] =useState([]);\r\n\r\n    const [comment,setComment] = useState(initialcommentvalue);\r\n\r\n    const [trigger,update]=useState(false);\r\n\r\n    const ref = useRef(\"\")\r\n    \r\n    \r\n    useEffect(()=>{\r\n        const fetchdata= async ()=>{\r\n            let data=await getComments(props.postid);\r\n               let arraydata=Array.from(data);\r\n                setComments(arraydata);\r\n                console.log(arraydata);\r\n\r\n        }\r\n        fetchdata();\r\n        console.log(comments);\r\n    },[trigger])\r\n\r\n    const addComment=(e)=>{\r\n        setComment(co => ({...co,[e.target.name]:e.target.value}))\r\n    }\r\n\r\n    const sendCommentData= async ()=>{\r\n        update(!trigger);\r\n        if(comment.commentdata === ''){\r\n            alert(\"Cannot post empty comments\");\r\n        }\r\n        else\r\n        {\r\n            await sendComment(comment);\r\n            ref.current.value=\"\";\r\n        }\r\n    }\r\n\r\n    const updatelike = async () => {\r\n        changeVisible(!visible);\r\n        if(postdata.liked.indexOf('Utkarsh')==-1){\r\n            postdata.liked.push('Utkarsh');\r\n        }\r\n        else{\r\n            let index=postdata.liked.indexOf('Utkarsh');\r\n            postdata.liked.splice(index,1);\r\n        }\r\n\r\n        await updatePostData(props.postid,postdata);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !visible && <FavoriteBorderIcon className={styles.like} onClick={()=>{updatelike()}} color=\"error\"/>\r\n            }\r\n            {\r\n                visible && <FavoriteIcon className={styles.like} onClick={()=>{updatelike()}}  color=\"error\"/>\r\n            }\r\n            <Box className={styles.container}>\r\n                <PersonIcon/>\r\n                <TextareaAutosize ref={ref} onChange={(e=> addComment(e))} className={styles.commentbox} minRows={3} placeholder=\"Add Your Comment Here\" name=\"commentdata\"/>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={()=>sendCommentData()}> Post</Button>\r\n            </Box>\r\n            {comments.map(co=>(\r\n                <Comment id={co._id} t={trigger} f={update}/>\r\n            ))}\r\n            \r\n           \r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default PostComment\r\n"]},"metadata":{},"sourceType":"module"}